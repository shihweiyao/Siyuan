<div class="grid-item">
    <div class="grid-item-content">
	    <label class="grid-item-close"><span aria-hidden="true">&times;</span></label>
		<div class="container-fluid donation_card_small">	
			<div class="row" style="">
				<div class="col-lg-12">	
					<div class="donation_card_small_img"></div>	
					<div class="donation_card_small_title">兩岸菁英學生交流計畫</div>
					<div class="donation_card_small_content"><%= truncate("交通大學於兩岸分設五個校區，彼此素有相當的歷史淵源背景，各自於專長領域發展。為擴展兩岸交大間之良性發展與互動關係，奠定未來研究及學術合作廣大基礎。本會特創造兩岸交大學生一個新的溝通和交流方式，建立彼此互信的感情，促使兩岸之間學術、文化與人員的交流。", length: 60)%></div>
					<button type="button" class="btn btn-primary btn-block grid-item-button">點擊贊助</button>		
				</div>			
			</div>	
		</div>  
		<div class="container-fluid donation_card_enlarge">	
			<div class="row" style="">
				<div class="col-sm-6">	
					<div class="donation_card_enlarge_img"></div>	
					<div class="donation_card_enlarge_title">兩岸菁英學生交流計畫</div>
					<div class="donation_card_enlarge_content">交通大學於兩岸分設五個校區，彼此素有相當的歷史淵源背景，各自於專長領域發展。為擴展兩岸交大間之良性發展與互動關係，奠定未來研究及學術合作廣大基礎。本會特創造兩岸交大學生一個新的溝通和交流方式，建立彼此互信的感情，促使兩岸之間學術、文化與人員的交流。</div>		
					<table class="table donation_card_enlarge_table">
					    <tbody>
					      <tr>
					        <th>名稱:</th>
					        <td>校園種子基金</td>
					      </tr>
					      <tr>
					        <th>預算:</th>
					        <td>400萬</td>
					      </tr>
					      <tr>
					        <th>執行狀況:</th>
					        <td>我們第一次舉辦大型公益活動「愛在偏鄉．夢想起飛」園遊會，在李南山理事長的帶領下，委由林三賢常務理事擔任活動執行長，經各組夥伴們的努力及嚕家人的熱情參與，活動順利圓滿結束，活動結算共計募得1,173,367元，並陸續執行於各項公益計畫。</td>
					      </tr>
					      <tr>
					        <th></th>
					        <td>附件</td>
					      </tr>					      
					    </tbody>
					</table>											
				</div>
				<div class="col-sm-6">	
					<div class="donation_card_pie">
						
<!--						
<section class="model-2">
  <div class="graph">支出比例</div><span tooltip="70%" class="tooltip">人事</span>
</section>
<section class="model-3">
  <div class="multi-graph">javaScript
    <div data-name="jQuery" class="graph jQuery"> </div>
    <div data-name="javaScript" class="graph javaScript"></div>
    <div data-name="Angular JS" class="graph angular"> </div>
  </div>
</section>						
-->						
					
					
<div id="doughnutChart" class="chart"></div>					
					
					
					
						
					</div>






					<div class="">是否需要收據</div>
					<div class="">線上捐款金額</div>
					<div class=""></div>
				</div>				
			</div>	
			<div class="row" style="">
				<div class="col-sm-12">	
					<div class="donation_card_pie" style="background:#ffffff; height: 300px;"></div>
				</div>				
			</div>				
		</div> 		
	</div>
</div>


<style>
/*
*, *:after, *:before {
  box-sizing: border-box;
}

section {
  display: inline-block;
  width: 33.33%;
  margin: 50px 0;
  text-align: center;
  min-width: 320px;
  position: relative;
}

.tooltip {
  position: absolute;
  background: #eee;
  padding: 3px;
  font-weight: 100;
  font-size: 12px;
  border-radius: 2px;
  border: 1px solid  #ddd;
  bottom: 100%;
  left: 50%;
  opacity: 0;
  -webkit-transition: 0.3s;
  transition: 0.3s;
  -webkit-transform: translateX(-50%);
  transform: translateX(-50%);
}
.tooltip:after {
  content: "" attr(tooltip) "";
  margin-left: 3px;
  color: #2DABD8;
}
.tooltip:before {
  content: '';
  width: 8px;
  height: 8px;
  background: #2DABD8;
  display: inline-block;
  margin-right: 5px;
}

.graph {
  width: 300px;
  height: 150px;
  position: relative;
  margin: auto;
  text-align: center;
  color: #fff;
  font-size: 22px;
  line-height: 280px;
  font-weight: 600;
  border-radius: 150px 150px 0 0;
  overflow: hidden;
  color: #0ff;
}
.graph:before, .graph:after {
  content: '';
  width: 300px;
  height: 150px;
  border: 50px solid #0ff;
  border-top: none;
  position: absolute;
  -webkit-transition: 0.3s;
  transition: 0.3s;
  -webkit-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
  border-radius: 0 0 300px 300px;
  -webkit-animation: demo 2s;
  animation: demo 2s;
  left: 0;
  top: 100%;
  z-index: 5;
}
.graph:after {
  z-index: 3;
  border-color: rgba(0, 0, 0, 0.15);
  -webkit-transform: rotate(180deg);
  transform: rotate(180deg);
}
.graph:hover:before {
  opacity: .8;
  cursor: pointer;
}
.graph:hover + .tooltip {
  bottom: 105%;
  opacity: 1;
}

.multi-graph {
  width: 300px;
  height: 150px;
  position: relative;
  margin: auto;
  color: #fff;
  font-size: 22px;
  line-height: 280px;
  font-weight: 600;
}
.multi-graph:before {
  content: '';
  width: 300px;
  height: 150px;
  border: 50px solid rgba(0, 0, 0, 0.15);
  border-bottom: none;
  position: absolute;
  -webkit-transform-origin: 50% 0%;
  transform-origin: 50% 0%;
  border-radius: 300px 300px 0 0;
  left: 0;
  top: 0;
}
.multi-graph .graph {
  position: absolute;
  top: 0;
  left: 0;
}
.multi-graph .graph:after {
  background: #eee;
  border: medium none;
  border-radius: 2px;
  color: #333;
  font-weight: 200;
  content: "" attr(data-name) "";
  display: inline-block;
  font-size: 12px;
  height: 20px;
  left: 50%;
  line-height: 20px;
  padding: 0 5px;
  top: 50px;
  z-index: 0;
  -webkit-transform: rotate(0deg) translateX(-50%);
  transform: rotate(0deg) translateX(-50%);
  width: auto;
  opacity: 0;
}
.multi-graph .graph:hover:after {
  opacity: 1;
  top: 70px;
}



section.model-2 .graph {
  color: #2DABD8;
}
section.model-2 .graph:before {
  -webkit-transform: rotate(130deg);
  transform: rotate(130deg);
  border-color: #2DABD8;
}

section.model-3 .javaScript:before {
  -webkit-transform: rotate(80deg);
  transform: rotate(80deg);
  border-color: #FEDA3E;
}
section.model-3 .jQuery:before {
  -webkit-transform: rotate(130deg);
  transform: rotate(130deg);
  border-color: #0669AD;
}
section.model-3 .angular:before {
  -webkit-transform: rotate(30deg);
  transform: rotate(30deg);
  border-color: #E62A39;
}
section.model-3 .graph {
  color: #2DABD8;
}
@-webkit-keyframes demo {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  50% {
    -webkit-transform: rotate(180deg);
    transform: rotate(180deg);
  }
}
@keyframes demo {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  50% {
    -webkit-transform: rotate(180deg);
    transform: rotate(180deg);
  }
}
-->
/*=============*/
/*
@import "bourbon";

@import url(//fonts.googleapis.com/css?family=Oswald:400);
body {
  background: #222428;
  font-family: "Oswald", sans-serif;
}
*/



</style>
<script>
/*=============*/

$(function(){
  $("#doughnutChart").drawDoughnutChart([
    { title: "Tokyo",         value : 120,  color: "#2C3E50" },
    { title: "San Francisco", value:  80,   color: "#FC4349" },
    { title: "New York",      value:  70,   color: "#6DBCDB" },
    { title: "London",        value : 50,   color: "#F7E248" },
    { title: "Sydney",        value : 40,   color: "#D7DADB" },
    { title: "Berlin",        value : 20,   color: "#FFF" }
  ]);
});
/*!
 * jquery.drawDoughnutChart.js
 * Version: 0.4.1(Beta)
 * Inspired by Chart.js(http://www.chartjs.org/)
 *
 * Copyright 2014 hiro
 * https://github.com/githiro/drawDoughnutChart
 * Released under the MIT license.
 * 
 */
;(function($, undefined) {
  $.fn.drawDoughnutChart = function(data, options) {
    var $this = this,
      W = $this.width(),
      H = $this.height(),
      centerX = W/2,
      centerY = H/2,
      cos = Math.cos,
      sin = Math.sin,
      PI = Math.PI,
      settings = $.extend({
        segmentShowStroke : true,
        segmentStrokeColor : "#0C1013",
        segmentStrokeWidth : 1,
        baseColor: "rgba(0,0,0,0.5)",
        baseOffset: 4,
        edgeOffset : 10,//offset from edge of $this
        percentageInnerCutout : 75,
        animation : true,
        animationSteps : 90,
        animationEasing : "easeInOutExpo",
        animateRotate : true,
        tipOffsetX: -8,
        tipOffsetY: -45,
        tipClass: "doughnutTip",
        summaryClass: "doughnutSummary",
        summaryTitle: "TOTAL:",
        summaryTitleClass: "doughnutSummaryTitle",
        summaryNumberClass: "doughnutSummaryNumber",
        beforeDraw: function() {  },
        afterDrawed : function() {  },
        onPathEnter : function(e,data) {  },
        onPathLeave : function(e,data) {  }
      }, options),
      animationOptions = {
        linear : function (t) {
          return t;
        },
        easeInOutExpo: function (t) {
          var v = t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t;
          return (v>1) ? 1 : v;
        }
      },
      requestAnimFrame = function() {
        return window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.oRequestAnimationFrame ||
          window.msRequestAnimationFrame ||
          function(callback) {
            window.setTimeout(callback, 1000 / 60);
          };
      }();

    settings.beforeDraw.call($this);

    var $svg = $('<svg width="' + W + '" height="' + H + '" viewBox="0 0 ' + W + ' ' + H + '" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"></svg>').appendTo($this),
        $paths = [],
        easingFunction = animationOptions[settings.animationEasing],
        doughnutRadius = Min([H / 2,W / 2]) - settings.edgeOffset,
        cutoutRadius = doughnutRadius * (settings.percentageInnerCutout / 100),
        segmentTotal = 0;

    //Draw base doughnut
    var baseDoughnutRadius = doughnutRadius + settings.baseOffset,
        baseCutoutRadius = cutoutRadius - settings.baseOffset;
    $(document.createElementNS('http://www.w3.org/2000/svg', 'path'))
      .attr({
        "d": getHollowCirclePath(baseDoughnutRadius, baseCutoutRadius),
        "fill": settings.baseColor
      })
      .appendTo($svg);

    //Set up pie segments wrapper
    var $pathGroup = $(document.createElementNS('http://www.w3.org/2000/svg', 'g'));
    $pathGroup.attr({opacity: 0}).appendTo($svg);

    //Set up tooltip
    var $tip = $('<div class="' + settings.tipClass + '" />').appendTo('body').hide(),
        tipW = $tip.width(),
        tipH = $tip.height();

    //Set up center text area
    var summarySize = (cutoutRadius - (doughnutRadius - cutoutRadius)) * 2,
        $summary = $('<div class="' + settings.summaryClass + '" />')
                   .appendTo($this)
                   .css({ 
                     width: summarySize + "px",
                     height: summarySize + "px",
                     "margin-left": -(summarySize / 2) + "px",
                     "margin-top": -(summarySize / 2) + "px"
                   });
    var $summaryTitle = $('<p class="' + settings.summaryTitleClass + '">' + settings.summaryTitle + '</p>').appendTo($summary);
    var $summaryNumber = $('<p class="' + settings.summaryNumberClass + '"></p>').appendTo($summary).css({opacity: 0});

    for (var i = 0, len = data.length; i < len; i++) {
      segmentTotal += data[i].value;
      $paths[i] = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'))
        .attr({
          "stroke-width": settings.segmentStrokeWidth,
          "stroke": settings.segmentStrokeColor,
          "fill": data[i].color,
          "data-order": i
        })
        .appendTo($pathGroup)
        .on("mouseenter", pathMouseEnter)
        .on("mouseleave", pathMouseLeave)
        .on("mousemove", pathMouseMove);
    }

    //Animation start
    animationLoop(drawPieSegments);

    //Functions
    function getHollowCirclePath(doughnutRadius, cutoutRadius) {
        //Calculate values for the path.
        //We needn't calculate startRadius, segmentAngle and endRadius, because base doughnut doesn't animate.
        var startRadius = -1.570,// -Math.PI/2
            segmentAngle = 6.2831,// 1 * ((99.9999/100) * (PI*2)),
            endRadius = 4.7131,// startRadius + segmentAngle
            startX = centerX + cos(startRadius) * doughnutRadius,
            startY = centerY + sin(startRadius) * doughnutRadius,
            endX2 = centerX + cos(startRadius) * cutoutRadius,
            endY2 = centerY + sin(startRadius) * cutoutRadius,
            endX = centerX + cos(endRadius) * doughnutRadius,
            endY = centerY + sin(endRadius) * doughnutRadius,
            startX2 = centerX + cos(endRadius) * cutoutRadius,
            startY2 = centerY + sin(endRadius) * cutoutRadius;
        var cmd = [
          'M', startX, startY,
          'A', doughnutRadius, doughnutRadius, 0, 1, 1, endX, endY,//Draw outer circle
          'Z',//Close path
          'M', startX2, startY2,//Move pointer
          'A', cutoutRadius, cutoutRadius, 0, 1, 0, endX2, endY2,//Draw inner circle
          'Z'
        ];
        cmd = cmd.join(' ');
        return cmd;
    };
    function pathMouseEnter(e) {
      var order = $(this).data().order;
      $tip.text(data[order].title + ": " + data[order].value)
          .fadeIn(200);
      settings.onPathEnter.apply($(this),[e,data]);
    }
    function pathMouseLeave(e) {
      $tip.hide();
      settings.onPathLeave.apply($(this),[e,data]);
    }
    function pathMouseMove(e) {
      $tip.css({
        top: e.pageY + settings.tipOffsetY,
        left: e.pageX - $tip.width() / 2 + settings.tipOffsetX
      });
    }
    function drawPieSegments (animationDecimal) {
      var startRadius = -PI / 2,//-90 degree
          rotateAnimation = 1;
      if (settings.animation && settings.animateRotate) rotateAnimation = animationDecimal;//count up between0~1

      drawDoughnutText(animationDecimal, segmentTotal);

      $pathGroup.attr("opacity", animationDecimal);

      //If data have only one value, we draw hollow circle(#1).
      if (data.length === 1 && (4.7122 < (rotateAnimation * ((data[0].value / segmentTotal) * (PI * 2)) + startRadius))) {
        $paths[0].attr("d", getHollowCirclePath(doughnutRadius, cutoutRadius));
        return;
      }
      for (var i = 0, len = data.length; i < len; i++) {
        var segmentAngle = rotateAnimation * ((data[i].value / segmentTotal) * (PI * 2)),
            endRadius = startRadius + segmentAngle,
            largeArc = ((endRadius - startRadius) % (PI * 2)) > PI ? 1 : 0,
            startX = centerX + cos(startRadius) * doughnutRadius,
            startY = centerY + sin(startRadius) * doughnutRadius,
            endX2 = centerX + cos(startRadius) * cutoutRadius,
            endY2 = centerY + sin(startRadius) * cutoutRadius,
            endX = centerX + cos(endRadius) * doughnutRadius,
            endY = centerY + sin(endRadius) * doughnutRadius,
            startX2 = centerX + cos(endRadius) * cutoutRadius,
            startY2 = centerY + sin(endRadius) * cutoutRadius;
        var cmd = [
          'M', startX, startY,//Move pointer
          'A', doughnutRadius, doughnutRadius, 0, largeArc, 1, endX, endY,//Draw outer arc path
          'L', startX2, startY2,//Draw line path(this line connects outer and innner arc paths)
          'A', cutoutRadius, cutoutRadius, 0, largeArc, 0, endX2, endY2,//Draw inner arc path
          'Z'//Cloth path
        ];
        $paths[i].attr("d", cmd.join(' '));
        startRadius += segmentAngle;
      }
    }
    function drawDoughnutText(animationDecimal, segmentTotal) {
      $summaryNumber
        .css({opacity: animationDecimal})
        .text((segmentTotal * animationDecimal).toFixed(1));
    }
    function animateFrame(cnt, drawData) {
      var easeAdjustedAnimationPercent =(settings.animation)? CapValue(easingFunction(cnt), null, 0) : 1;
      drawData(easeAdjustedAnimationPercent);
    }
    function animationLoop(drawData) {
      var animFrameAmount = (settings.animation)? 1 / CapValue(settings.animationSteps, Number.MAX_VALUE, 1) : 1,
          cnt =(settings.animation)? 0 : 1;
      requestAnimFrame(function() {
          cnt += animFrameAmount;
          animateFrame(cnt, drawData);
          if (cnt <= 1) {
            requestAnimFrame(arguments.callee);
          } else {
            settings.afterDrawed.call($this);
          }
      });
    }
    function Max(arr) {
      return Math.max.apply(null, arr);
    }
    function Min(arr) {
      return Math.min.apply(null, arr);
    }
    function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function CapValue(valueToCap, maxValue, minValue) {
      if (isNumber(maxValue) && valueToCap > maxValue) return maxValue;
      if (isNumber(minValue) && valueToCap < minValue) return minValue;
      return valueToCap;
    }
    return $this;
  };
})(jQuery);

</script>
